********************************************************************************
* This file intends at gathering the code guidelines I apply to this software. *
********************************************************************************

-----------------
- Include order -
-----------------

In headers, avoid includes when possible, prefering classes declarations.

* Headers:
  - Parent classes
  - C++ classes
  - Qt classes
  - Third-party classes
  - StateS classes
* Sources:
  - Current class header
  - C++ classes
  - Qt classes
  - Third-party classes
  - StateS classes

---------------------
- Declaration order -
---------------------

In a class declaration, elements are declared in a specific order.
All elements from this list are separated by an access modifier.

- Type declarations
  - Public
  - Protected
  - Private

- Static functions
  - Public
  - Protected
  - Private

- Static members
  - Public
  - Protected
  - Private

- Constructors
  - Public
  - Protected
  - Private

- Object functions
  - Public slots
  - Public functions
  - Protected slots
  - Protected functions
  - Private slots
  - Private functions
  - Signals

- Object members
  - Protected
  - Private

-----------------
- Signals/slots -
-----------------

All slots must be declared as private (or protected when necessary), so that connection can only be done by the object itself.
Exception for overriden slots from Qt API which must respect the base object declaration.

As much as possible, signals must be named xxxEvent and slots xxxEventHandler, or be named according to the action it triggers.

----------------
- Constructors -
----------------

- All constructors must be set as "explicit", except if required otherwise for basic types.
- Constructors of classes inheriting QWidget must provide a "parent" parameter (defaulted to nullptr).
- Constructors of classes inheriting from QObject do not need a "parent" parameter.
  - Exception: classes inheriting from QAbstractTableModel require it.

------------
- Pointers -
------------

Object are managed by smart pointers except for:
- QWidgets, which generally have a parent managing their life,
- QGraphicsItems, that belong to a scene,
- Objects passed using an overriden API function.

Objects must store references to other objects as:
- unique_ptr if local only,
- shared_ptr in the object that is in charge of life manaement of the referred object,
- ID only for all non owning objects
  - Exception can be made for objects that are executed at once then dismissed, such as parser or exporter, these can store a shared_ptr for their lifetime.
